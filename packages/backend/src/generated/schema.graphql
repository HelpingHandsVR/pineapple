### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Ability {
  action: AbilityAction!
  subject: AbilitySubject
}

enum AbilityAction {
  ATTACH
  CREATE
  DELETE
  DETACH
  LOG_OUT
  LOG_OUT_OTHERS
  READ
  SOFT_DELETE
  UPDATE
}

enum AbilitySubject {
  ATTENDABLE_OTHERS
  ATTENDABLE_SELF
  ATTENDANCE_RECORD_OTHERS
  ATTENDANCE_RECORD_SELF
  DISCORD_ACCOUNT_OTHERS
  DISCORD_ACCOUNT_SELF
  DISCORD_OAUTH_REQUEST_SELF
  LESSON_OTHERS
  LESSON_SELF
  PERMISSION_SELF
  SYSTEM_PERMISSION
  SYSTEM_QUEUE
  SYSTEM_ROLE
  USER_OTHERS
  USER_SELF
}

type Attendable {
  createdAt: DateTime!
  createdBy: User!
  endsAt: DateTime!
  id: ID!
  name: String!
  startsAt: DateTime!
  updatedAt: DateTime!
  updatedBy: User!
  world: VRChatWorld
}

type AttendablePagination implements PaginationResult {
  cursor: PaginationResultCursor!
  data: [Attendable]!
}

input AttendableQueryWhereInput {
  id: ID!
}

input AttendablesQuerySearchInput {
  name: String!
}

input AttendablesQueryWhereInput {
  endsAt: AttendablesQueryWhereInputDateConstraint
  startsAt: AttendablesQueryWhereInputDateConstraint
}

input AttendablesQueryWhereInputDateConstraint {
  after: DateTime
  before: DateTime
}

type AttendanceRecord {
  attendable: Attendable!
  endsAt: DateTime!
  id: ID!
  startsAt: DateTime!
}

type AttendanceRecordPagination implements PaginationResult {
  cursor: PaginationResultCursor!
  data: [AttendanceRecord]!
}

input CreateRoleMutationInput {
  name: String
  permissions: [ID]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type DiscordAccount {
  account: DiscordUser!
  id: ID!
}

input DiscordOauthMutationInput {
  accessToken: String
  expiresIn: Int
  state: String
}

type DiscordUser {
  discriminator: String!
  id: ID!
  username: String!
}

"""
A field whose value conforms to the standard internet email address format as
specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress

input LoginInput {
  email: String
  password: String
}

type Mutation {
  createRole(input: CreateRoleMutationInput!): Role!
  discordOauthCallback(input: DiscordOauthMutationInput!): DiscordUser!
  login(input: LoginInput!): User!
  logout: Boolean!
  register(input: RegisterInput!): User!
  seed: Boolean!
  updateRole(input: UpdateRoleMutationInput!, where: UpdateRoleMutationWhereInput!): Role!
  upsertAttendanceRecord(input: UpsertAttendaceRecordMutationInput!): AttendanceRecord!
}

input PaginationInput {
  afterCursor: String
  beforeCursor: String
  limit: Int = 15
  order: PaginationInputOrder = ASC
  orderBy: String
}

enum PaginationInputOrder {
  ASC
  DESC
}

interface PaginationResult {
  cursor: PaginationResultCursor!
}

type PaginationResultCursor {
  afterCursor: String
  beforeCursor: String
}

type Permission {
  action: AbilityAction!
  id: ID!
  name: String!
  subject: AbilitySubject!
}

type PermissionPagination implements PaginationResult {
  cursor: PaginationResultCursor!
  data: [Permission]!
}

type Query {
  attendable(where: AttendableQueryWhereInput): Attendable
  attendables(pagination: PaginationInput, search: AttendablesQuerySearchInput, where: AttendablesQueryWhereInput): AttendablePagination!
  attendanceRecords(pagination: PaginationInput): AttendanceRecordPagination!
  discordOauthURL: String!
  permissions(pagination: PaginationInput): PermissionPagination!
  role(where: RoleQueryWhereInput!): Role
  roles(pagination: PaginationInput): RolePagination!
  upcomingAttendables(input: UpcomingAttendablesQueryInput!): [Attendable]! @deprecated(reason: "Use the \"attendables\" query")
  user(where: UserQueryWhereInput!): User
  viewer: Viewer
  vrchatUser(where: VRChatUserQueryWhereInput!): VRChatUser!
}

input RegisterInput {
  display: String!
  email: String!
  password: String!
}

type Role {
  ability: [Ability]!
  id: ID!
  name: String!
}

type RolePagination implements PaginationResult {
  cursor: PaginationResultCursor!
  data: [Role]!
}

input RoleQueryWhereInput {
  id: ID
}

input UpcomingAttendablesQueryInput {
  take: Int
}

input UpdateRoleMutationInput {
  name: String
  permissions: [ID]
}

input UpdateRoleMutationWhereInput {
  id: ID
}

input UpsertAttendaceRecordMutationInput {
  attendableId: ID!
  endsAt: DateTime
  startsAt: DateTime
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

type User {
  discord: DiscordAccount
  display: String!
  id: ID!
  role: Role!
  vrchat: VRChatUser
}

input UserQueryWhereInput {
  id: ID
  vrcUserID: ID
}

type Viewer {
  ability: [Ability]!
  user: User!
}

type VRChatConfig {
  announcements: [VRChatConfigAnnouncement]!
  dynamicWorldRows: [VRChatConfigDynamicWorldRow]!
  messageOfTheDay: String!
}

type VRChatConfigAnnouncement {
  name: String!
  text: String!
}

type VRChatConfigDynamicWorldRow {
  index: Int!
  name: String!
  platform: String!
  sortHeading: String!
  sortOrder: String!
  sortOwnership: String!
}

type VRChatExtendedUser implements VRChatUserBase {
  activeFriends: [String]!
  allowAvatarCopying: Boolean!
  bio: String!
  bioLinks: String!
  currentAvatar: String!
  currentAvatarImageUrl: String!
  currentAvatarThumbnailImageUrl: String!
  displayName: String!
  email: String
  id: ID!
  isFriend: Boolean!
  last_login: String!
  last_platform: String!
  obfuscatedEmail: String!
  offlineFriends: [String]!
  onlineFriends: [String]!
  role: VRChatUserRole!
  state: String!
  status: String!
  statusDescription: String!
  twoFactorAuthEnabled: Boolean!
  user: User
  username: String!
}

"""User type, when the user has not sent a friend request to Pineapple"""
type VRChatLimitedUser implements VRChatUserBase {
  allowAvatarCopying: Boolean!
  bio: String!
  bioLinks: String!
  currentAvatarImageUrl: String!
  currentAvatarThumbnailImageUrl: String!
  displayName: String!
  id: ID!
  isFriend: Boolean!
  last_login: String!
  last_platform: String!
  role: VRChatUserRole!
  username: String!
}

type VRChatUser implements VRChatUserBase {
  allowAvatarCopying: Boolean!
  bio: String!
  bioLinks: String!
  currentAvatarImageUrl: String!
  currentAvatarThumbnailImageUrl: String!
  displayName: String!
  id: ID!
  isFriend: Boolean!
  last_login: String!
  last_platform: String!
  location: String!
  role: VRChatUserRole!
  state: String!
  status: String!
  statusDescription: String!
  user: User
  username: String!
  worldId: String!
}

interface VRChatUserBase {
  allowAvatarCopying: Boolean!
  bio: String!
  bioLinks: String!
  currentAvatarImageUrl: String!
  currentAvatarThumbnailImageUrl: String!
  displayName: String!
  id: ID!
  isFriend: Boolean!
  last_login: String!
  last_platform: String!
  role: VRChatUserRole!
  username: String!
}

input VRChatUserQueryWhereInput {
  id: ID
}

enum VRChatUserRole {
  KNOWN
  NEW_USER
  TRUSTED
  USER
  VISITOR
}

type VRChatWorld {
  author: VRChatLimitedUser
  authorId: ID!
  authorName: String!
  capacity: Int!
  created_at: DateTime!
  description: String!
  favorites: Int!
  featured: Boolean!
  heat: Int!
  id: ID!
  imageUrl: URL!
  instances: [VRChatWorldInstance]!
  labsPublicationDate: DateTime!
  name: String!
  occupants: Int!
  organization: String!
  popularity: Int!
  privateOccupants: Int!
  publicationDate: DateTime!
  publicOccupants: Int!
  releaseStatus: String!
  tags: [String]!
  thumbnailImageUrl: URL!
  updated_at: DateTime!
  version: Int!
  visits: Int!
}

type VRChatWorldInstance {
  id: ID!
  players: Int!
}
