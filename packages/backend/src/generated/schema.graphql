### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Ability {
  action: AbilityAction!
  subject: AbilitySubject
}

enum AbilityAction {
  ATTACH
  CREATE
  DELETE
  DETACH
  LOG_OUT
  LOG_OUT_OTHERS
  READ
  SOFT_DELETE
  UPDATE
}

enum AbilitySubject {
  DISCORD_ACCOUNT_OTHERS
  DISCORD_ACCOUNT_SELF
  DISCORD_OAUTH_REQUEST_SELF
  LESSON_OTHERS
  LESSON_SELF
  PERMISSION_SELF
  USER_OTHERS
  USER_SELF
}

type DiscordAccount {
  account: DiscordUser!
  id: ID!
}

input DiscordOauthMutationInput {
  accessToken: String
  expiresIn: Int
  state: String
}

type DiscordUser {
  discriminator: String!
  id: ID!
  username: String!
}

input LoginInput {
  email: String
  password: String
}

type Mutation {
  discordOauthCallback(input: DiscordOauthMutationInput!): DiscordUser!
  login(input: LoginInput!): User!
  logout: Boolean!
  register(input: RegisterInput!): User!
}

type Query {
  discordOauthURL: String!
  user(where: UserQueryWhereInput!): User
  viewer: Viewer
  vrchatUser(where: VRChatUserQueryWhereInput!): VRChatUser!
}

input RegisterInput {
  display: String!
  email: String!
  password: String!
}

type Role {
  id: ID!
  name: String!
}

type User {
  discord: DiscordAccount
  display: String!
  id: ID!
  role: Role!
  vrchat: VRChatUser
}

input UserQueryWhereInput {
  id: ID
  vrcUserID: ID
}

type Viewer {
  ability: [Ability]!
  user: User!
}

type VRChatConfig {
  announcements: [VRChatConfigAnnouncement]!
  dynamicWorldRows: [VRChatConfigDynamicWorldRow]!
  messageOfTheDay: String!
}

type VRChatConfigAnnouncement {
  name: String!
  text: String!
}

type VRChatConfigDynamicWorldRow {
  index: Int!
  name: String!
  platform: String!
  sortHeading: String!
  sortOrder: String!
  sortOwnership: String!
}

type VRChatExtendedUser implements VRChatUserBase {
  activeFriends: [String]!
  allowAvatarCopying: Boolean!
  bio: String!
  bioLinks: String!
  currentAvatar: String!
  currentAvatarImageUrl: String!
  currentAvatarThumbnailImageUrl: String!
  displayName: String!
  email: String
  id: ID!
  isFriend: Boolean!
  last_login: String!
  last_platform: String!
  obfuscatedEmail: String!
  offlineFriends: [String]!
  onlineFriends: [String]!
  role: VRChatUserRole!
  state: String!
  status: String!
  statusDescription: String!
  twoFactorAuthEnabled: Boolean!
  user: User
  username: String!
}

type VRChatUser implements VRChatUserBase {
  allowAvatarCopying: Boolean!
  bio: String!
  bioLinks: String!
  currentAvatarImageUrl: String!
  currentAvatarThumbnailImageUrl: String!
  displayName: String!
  id: ID!
  isFriend: Boolean!
  last_login: String!
  last_platform: String!
  location: String!
  role: VRChatUserRole!
  state: String!
  status: String!
  statusDescription: String!
  user: User
  username: String!
  worldId: String!
}

interface VRChatUserBase {
  allowAvatarCopying: Boolean!
  bio: String!
  bioLinks: String!
  currentAvatarImageUrl: String!
  currentAvatarThumbnailImageUrl: String!
  displayName: String!
  id: ID!
  isFriend: Boolean!
  last_login: String!
  last_platform: String!
  role: VRChatUserRole!
  state: String!
  status: String!
  statusDescription: String!
  username: String!
}

input VRChatUserQueryWhereInput {
  id: ID
}

enum VRChatUserRole {
  KNOWN
  NEW_USER
  TRUSTED
  USER
  VISITOR
}
