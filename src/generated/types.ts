/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as ctx from "../graphql/context/index"





declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Post: {};
  Query: {};
  VRChatConfig: { // root type
    address: string; // String!
    announcements: Array<NexusGenRootTypes['VRChatConfigAnnouncement'] | null>; // [VRChatConfigAnnouncement]!
    apiKey: string; // String!
    appName: string; // String!
    buildVersionTag: string; // String!
    clientApiKez: string; // String!
    clientBPSCeiling: number; // Int!
    clientDisconnectTimeout: number; // Int!
    clientReservedPlayerBPS: number; // Int!
    clientSentCountAllowance: number; // Int!
    contactEmail: string; // String!
    copyrightEmail: string; // String!
    currentTOSVersion: string; // String!
    defaultAvatar: string; // String!
    deploymentGroup: string; // String!
    devAppVersionStandalone: string; // String!
    devDownloadLinkWindows: string; // String!
    devSdkUrl: string; // String!
    devSdkVersion: string; // String!
    devServerVersionStandalone: string; // String!
    disableAvatarCopying: boolean; // Boolean!
    disableAvatarGating: boolean; // Boolean!
    disableCommunityLabs: boolean; // Boolean!
    disableCommunityLabsPromotion: boolean; // Boolean!
    disableEmail: boolean; // Boolean!
    disableEventStream: string; // String!
    disableFeedbackGating: boolean; // Boolean!
    disableRegistration: string; // String!
    disableSteamNetworking: boolean; // Boolean!
    disableTwoFactorAuth: boolean; // Boolean!
    disableUdon: boolean; // Boolean!
    disableUpgradeAccount: boolean; // Boolean!
    downloadLinkWindows: string; // String!
    downloadUrls: NexusGenRootTypes['VRChatConfigDownloadUrls']; // VRChatConfigDownloadUrls!
    dynamicWorldRows: Array<NexusGenRootTypes['VRChatConfigDynamicWorldRow'] | null>; // [VRChatConfigDynamicWorldRow]!
    gearDemoRoomId: string; // String!
    homeWorldId: string; // String!
    hubWorldId: string; // String!
    jobsEmail: string; // String!
    messageOfTheDay: string; // String!
    moderationEmail: string; // String!
    moderationQueryPeriod: number; // Int!
    notAllowedToSelectAvatarInPrivateWorldMessage: string; // String!
    plugin: string; // String!
    releaseAppVersionStandalone: string; // String!
    releaseSdkUrl: string; // String!
    releaseSdkVersion: string; // String!
    releaseServerVersionStandalone: string; // String!
    sdkDeveloperFaqUrl: string; // String!
    sdkDiscordUrl: string; // String!
    sdkNotAllowedToPublishMessage: string; // String!
    sdkUnityVersion: string; // String!
    serverName: string; // String!
    supportEmail: string; // String!
    timeOutWorldId: string; // String!
    tutorialWorldId: string; // String!
    updateRateMsMaximum: number; // Int!
    updateRateMsMinimum: number; // Int!
    updateRateMsNormal: number; // Int!
    uploadAnalysisPercent: number; // Int!
    useReliableUdpForVoice: boolean; // Boolean!
    userUpdatePeriod: number; // Int!
    userVerificationDelay: number; // Int!
    userVerificationRetry: number; // Int!
    userVerificationTimeout: number; // Int!
    viveWindowsUrl: string; // String!
    whiteListedAssetUrls: Array<string | null>; // [String]!
    worldUpdatePeriod: number; // Int!
  }
  VRChatConfigAnnouncement: { // root type
    name: string; // String!
    text: string; // String!
  }
  VRChatConfigDownloadUrls: { // root type
    sdk2: string; // String!
    sdk3: string; // String!
  }
  VRChatConfigDynamicWorldRow: { // root type
    index: number; // Int!
    name: string; // String!
    platform: string; // String!
    sortHeading: string; // String!
    sortOrder: string; // String!
    sortOwnership: string; // String!
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
}

export interface NexusGenFieldTypes {
  Post: { // field return type
    id: string; // ID!
    test: string; // String!
  }
  Query: { // field return type
    test: NexusGenRootTypes['VRChatConfig']; // VRChatConfig!
  }
  VRChatConfig: { // field return type
    address: string; // String!
    announcements: Array<NexusGenRootTypes['VRChatConfigAnnouncement'] | null>; // [VRChatConfigAnnouncement]!
    apiKey: string; // String!
    appName: string; // String!
    buildVersionTag: string; // String!
    clientApiKez: string; // String!
    clientBPSCeiling: number; // Int!
    clientDisconnectTimeout: number; // Int!
    clientReservedPlayerBPS: number; // Int!
    clientSentCountAllowance: number; // Int!
    contactEmail: string; // String!
    copyrightEmail: string; // String!
    currentTOSVersion: string; // String!
    defaultAvatar: string; // String!
    deploymentGroup: string; // String!
    devAppVersionStandalone: string; // String!
    devDownloadLinkWindows: string; // String!
    devSdkUrl: string; // String!
    devSdkVersion: string; // String!
    devServerVersionStandalone: string; // String!
    disableAvatarCopying: boolean; // Boolean!
    disableAvatarGating: boolean; // Boolean!
    disableCommunityLabs: boolean; // Boolean!
    disableCommunityLabsPromotion: boolean; // Boolean!
    disableEmail: boolean; // Boolean!
    disableEventStream: string; // String!
    disableFeedbackGating: boolean; // Boolean!
    disableRegistration: string; // String!
    disableSteamNetworking: boolean; // Boolean!
    disableTwoFactorAuth: boolean; // Boolean!
    disableUdon: boolean; // Boolean!
    disableUpgradeAccount: boolean; // Boolean!
    downloadLinkWindows: string; // String!
    downloadUrls: NexusGenRootTypes['VRChatConfigDownloadUrls']; // VRChatConfigDownloadUrls!
    dynamicWorldRows: Array<NexusGenRootTypes['VRChatConfigDynamicWorldRow'] | null>; // [VRChatConfigDynamicWorldRow]!
    gearDemoRoomId: string; // String!
    homeWorldId: string; // String!
    hubWorldId: string; // String!
    jobsEmail: string; // String!
    messageOfTheDay: string; // String!
    moderationEmail: string; // String!
    moderationQueryPeriod: number; // Int!
    notAllowedToSelectAvatarInPrivateWorldMessage: string; // String!
    plugin: string; // String!
    releaseAppVersionStandalone: string; // String!
    releaseSdkUrl: string; // String!
    releaseSdkVersion: string; // String!
    releaseServerVersionStandalone: string; // String!
    sdkDeveloperFaqUrl: string; // String!
    sdkDiscordUrl: string; // String!
    sdkNotAllowedToPublishMessage: string; // String!
    sdkUnityVersion: string; // String!
    serverName: string; // String!
    supportEmail: string; // String!
    timeOutWorldId: string; // String!
    tutorialWorldId: string; // String!
    updateRateMsMaximum: number; // Int!
    updateRateMsMinimum: number; // Int!
    updateRateMsNormal: number; // Int!
    uploadAnalysisPercent: number; // Int!
    useReliableUdpForVoice: boolean; // Boolean!
    userUpdatePeriod: number; // Int!
    userVerificationDelay: number; // Int!
    userVerificationRetry: number; // Int!
    userVerificationTimeout: number; // Int!
    viveWindowsUrl: string; // String!
    whiteListedAssetUrls: Array<string | null>; // [String]!
    worldUpdatePeriod: number; // Int!
  }
  VRChatConfigAnnouncement: { // field return type
    name: string; // String!
    text: string; // String!
  }
  VRChatConfigDownloadUrls: { // field return type
    sdk2: string; // String!
    sdk3: string; // String!
  }
  VRChatConfigDynamicWorldRow: { // field return type
    index: number; // Int!
    name: string; // String!
    platform: string; // String!
    sortHeading: string; // String!
    sortOrder: string; // String!
    sortOwnership: string; // String!
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Post" | "Query" | "VRChatConfig" | "VRChatConfigAnnouncement" | "VRChatConfigDownloadUrls" | "VRChatConfigDynamicWorldRow";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: ctx.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}